[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "dance-motion-embedding"
version = "0.1.0"
description = "A comprehensive system for converting dance videos into pose time series data using MediaPipe's AI pose estimation, generating vector embeddings for poses and movement segments, and enabling motion analysis in high-dimensional space."
readme = "README.md"
requires-python = ">=3.9,<3.13"
license = {text = "MIT"}
authors = [
    {name = "Your Name", email = "your.email@example.com"},
]
keywords = ["dance", "motion", "embedding", "mediapipe", "rerun", "pose-estimation"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Image Processing",
    "Topic :: Multimedia :: Video",
]

dependencies = [
    # Core dependencies
    "numpy>=1.21.0",
    "pandas>=1.3.0",
    "opencv-python>=4.6.0",
    
    # MediaPipe for pose estimation
    "mediapipe>=0.10.0",
    
    # Rerun for visualization
    "rerun-sdk>=0.10.0",
    
    # Machine learning and deep learning
    "torch>=1.12.0",
    "scikit-learn>=1.1.0",
    "umap-learn>=0.5.7",
    
    # Visualization
    "matplotlib>=3.5.0",
    "plotly>=5.0.0",
    
    # Utilities
    "pathlib2>=2.3.0; python_version < '3.4'",
    "flask>=2.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=22.0.0",
    "isort>=5.0.0",
    "flake8>=5.0.0",
    "mypy>=0.991",
    "pre-commit>=2.20.0",
]

docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "myst-parser>=0.18.0",
]

gpu = [
    "torch>=1.12.0",
]

[project.scripts]
dance-motion-embedding = "dance_motion_embedding.main:main"

[project.urls]
Homepage = "https://github.com/yourusername/dance-motion-embedding"
Documentation = "https://dance-motion-embedding.readthedocs.io/"
Repository = "https://github.com/yourusername/dance-motion-embedding"
"Bug Tracker" = "https://github.com/yourusername/dance-motion-embedding/issues"

[tool.hatch.build.targets.wheel]
packages = ["src/dance_motion_embedding"]

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["dance_motion_embedding"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "mediapipe.*",
    "cv2.*",
    "plotly.*",
    "umap.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=dance_motion_embedding",
    "--cov-report=term-missing",
    "--cov-report=html",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src/dance_motion_embedding"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
] 